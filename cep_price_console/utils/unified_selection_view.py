from cep_price_console.utils.log_utils import CustomAdapter, debug
from cep_price_console.utils.gui_utils import VerticalScrolledFrame, odd_background, even_background, BadButton, dflt
import tkinter as tk
from tkinter import messagebox
import tkinter.ttk as ttk
from collections import OrderedDict
import logging
from sqlalchemy import or_
from sqlalchemy.sql.expression import and_
from pandastable import TableModel
import pandas as pd

# TODO: Add an "OK" button (or proceed)
# TODO: Last sold date?
# TODO: Get rid of shipping information
# TODO: Get rid of most columns
# TODO: Write validation formula for typed data


"""
Each factor should have: 
1: selection value list
    this list is generated by scraping values (lists) from the gui selection
    if this list is empty, the factor shouldn't be filtered at all
2: get filter
    this should return None if the selection value list is empty
3: resolved value list
    a list of all of the values that are selected. 
    if the selection value list is empty, this is a list of all values. 
    if the selection value list is not empty, this is the selection value list
    
Unit list
unit to atomic query
atomic list

"""

logger = CustomAdapter(logging.getLogger(str(__name__)), None)


class UniversalSelectionFrame(ttk.Frame):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, master,
                 show_contract=True,
                 show_customer=True,
                 show_cust_shipto=True,
                 show_cust_category=True,
                 show_product=True,
                 show_product_line=True,
                 show_price_group=True,
                 show_primary_vendor=True,
                 show_secondary_vendor=True,
                 show_major_group=True,
                 **kwargs):
        self.master = master
        super().__init__(self.master, style="odd.group.TFrame", padding=5, **kwargs)
        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)
        from cep_price_console.db_management.server_utils import mysql_session_maker
        self.session = mysql_session_maker()

        self.paned_outer = tk.PanedWindow(
            self,
            orient=tk.HORIZONTAL,
            name="paned_outer",
            sashrelief=tk.FLAT,
            sashwidth=7,
            bg=odd_background
        )
        self.paned_outer.grid(row=0, column=0, sticky=tk.NSEW)

        self.paned_factor_criteria_outer = ttk.Frame(self.paned_outer,
                                                     style="even.group.TFrame",
                                                     padding=5)
        self.paned_factor_criteria_outer.columnconfigure(0, weight=1)
        self.paned_factor_criteria_outer.rowconfigure(2, weight=1)

        self.factor_selection_instructions = FactorSelectionInstructions(self.paned_factor_criteria_outer)
        self.factor_selection_instructions.grid(row=0, column=0, sticky=tk.NSEW)

        separator = ttk.Frame(
            self.paned_factor_criteria_outer,
            style="even.group.TFrame",
            height=5
        )
        separator.grid(row=1, column=0)

        self.paned_factor_criteria = tk.PanedWindow(
            self.paned_factor_criteria_outer,
            orient=tk.HORIZONTAL,
            name="paned_factor_criteria",
            sashrelief=tk.FLAT,
            sashwidth=7,
            background=even_background
        )
        self.paned_factor_criteria.grid(row=2, column=0, sticky=tk.NSEW)

        self.factor_selection_frame = ttk.Frame(self.paned_outer,
                                                name="factor_selection_canvas_frame",
                                                style="even.group.TFrame",
                                                padding=5)
        self.factor_selection_frame.columnconfigure(0, weight=1)
        self.factor_selection_frame.rowconfigure(0, weight=1)

        self.factor_selection = FactorSelection(self.factor_selection_frame)
        self.factor_selection.grid(row=0, column=0, sticky=tk.NSEW)

        self.entity_cust = CustEntity(self.session)
        self.entity_cust.add_factor(FactorCustShipTo(self, show_cust_shipto))
        self.entity_cust.add_factor(FactorContract(self, show_contract))
        self.entity_cust.add_factor(FactorCustomer(self, show_customer))
        self.entity_cust.add_factor(FactorCustCategory(self, show_cust_category))

        self.entity_prod = ProdEntity(self.session)
        self.entity_prod.add_factor(FactorProduct(self, show_product))
        self.entity_prod.add_factor(FactorProdLine(self, show_product_line))
        self.entity_prod.add_factor(FactorPriceGroup(self, show_price_group))
        self.entity_prod.add_factor(FactorPrimaryVendor(self, show_primary_vendor))
        self.entity_prod.add_factor(FactorSecondaryVendor(self, show_secondary_vendor))
        self.entity_prod.add_factor(FactorMajorGroup(self, show_major_group))

        count = 0
        for entity in (self.entity_cust, self.entity_prod):
            for factor in entity.factor_dict.values():
                factor.grid_check_btn(self.factor_selection.factor_check_btn_frame, row=count)
                factor.add_sel_frame_parent(self.paned_factor_criteria)
                count += 1

        self.factor_selection_frame.update_idletasks()
        self.paned_factor_criteria_outer.update_idletasks()

        self.paned_outer.add(self.factor_selection_frame,
                             width=300,
                             pady=5,
                             stretch="never")

        self.paned_outer.add(self.paned_factor_criteria_outer,
                             width=0,
                             pady=5,
                             stretch="always")

        self.paned_outer.bind("<Configure>", self.on_resize)

    @debug(lvl=logging.NOTSET, prefix='')
    def show(self):
        # noinspection PyProtectedMember
        self.factor_selection_instructions.on_resize(None)
        # noinspection PyProtectedMember
        self.factor_selection_instructions._configure_canvas(None)
        self.factor_selection.on_resize(None)
        # noinspection PyProtectedMember
        self.factor_selection._configure_canvas(None)

    @debug(lvl=logging.NOTSET, prefix='')
    def close(self):
        msgbox = messagebox.askokcancel("Quit", "Do you want to quit?", parent=self)
        if msgbox:
            self.destroy()

    @debug(lvl=logging.DEBUG, prefix='')
    def run_test(self,
                 vl_cntr_num=None,
                 vl_cust_cat=None,
                 vl_cust_num=None,
                 vl_cust_num_shipto=None,
                 vl_prod_num=None,
                 vl_prod_line=None,
                 vl_price_group_code=None,
                 vl_primary_vend_num=None,
                 vl_vend_num=None,
                 vl_major_group=None):
        if vl_cntr_num is not None:
            self.entity_cust.factor_dict["Cntr_Num"].run_test(value_list=vl_cntr_num)
        if vl_cust_cat is not None:
            self.entity_cust.factor_dict["Cust_Cat"].run_test(value_list=vl_cust_cat)
        if vl_cust_num is not None:
            self.entity_cust.factor_dict["Cust_Num"].run_test(value_list=vl_cust_num)
        if vl_cust_num_shipto is not None:
            self.entity_cust.factor_dict["Cust_Num_ShipTo_Combo"].run_test(value_list=vl_cust_num_shipto)
        if vl_prod_num is not None:
            self.entity_prod.factor_dict["Prod_Num"].run_test(value_list=vl_prod_num)
        if vl_prod_line is not None:
            self.entity_prod.factor_dict["Prod_Line"].run_test(value_list=vl_prod_line)
        if vl_price_group_code is not None:
            self.entity_prod.factor_dict["Price_Group_Code"].run_test(value_list=vl_price_group_code)
        if vl_primary_vend_num is not None:
            self.entity_prod.factor_dict["Primary_Vend_Num"].run_test(value_list=vl_primary_vend_num)
        if vl_vend_num is not None:
            self.entity_prod.factor_dict["Vend_Num"].run_test(value_list=vl_vend_num)
        if vl_major_group is not None:
            self.entity_prod.factor_dict["Major_Group"].run_test(value_list=vl_major_group)

    # noinspection PyUnusedLocal
    def on_resize(self, event):
        self.factor_selection_frame.event_generate("<Configure>")
        self.factor_selection_instructions.event_generate("<Configure>")


class FactorSelection(VerticalScrolledFrame):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    # @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, parent):
        self.parent = parent
        super().__init__(self.parent,
                         relief=tk.RAISED,
                         padding=5,
                         style="odd.group.TFrame",
                         canvas_background=odd_background)
        self.interior.config(style="odd.group.TFrame")
        self.interior.columnconfigure(0, weight=1)
        self.interior.rowconfigure(2, weight=1)
        self.labelwidget = ttk.Label(
            self.interior,
            text="1) Factor Selection",
            wraplength=20,
            style="odd.heading3.TLabel",
        )
        self.labelwidget.grid(row=0, column=0, sticky=tk.NW)
        self.bind("<Configure>", self.on_resize, "+")

        self.factor_check_box_instr = ttk.Label(
            self.interior,
            text=("  a) Check the box next to the entity you want to filter by. A selection dialogue will appear to "
                  "the right.\n"
                  "  b) See instructions for the selection dialogue below"),
            wraplength=self.interior.winfo_width(),
            style="odd.notes.TLabel"
        )
        self.factor_check_box_instr.grid(row=1, column=0, sticky=tk.NW + tk.E)

        self.factor_check_btn_frame = ttk.Frame(
            self.interior,
            relief=tk.SUNKEN,
            padding=5,
            style="even.group.TFrame"
        )
        self.factor_check_btn_frame.grid(row=2, column=0, sticky=tk.NSEW)
        self.factor_check_btn_frame.columnconfigure(0, weight=1)

    # noinspection PyUnusedLocal
    def on_resize(self, event):
        self._configure_canvas(None)
        self.labelwidget.configure(wraplength=self.interior.winfo_width())
        self.factor_check_box_instr.configure(wraplength=self.interior.winfo_width())


class FactorSelectionInstructions(VerticalScrolledFrame):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    # @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, parent):
        self.parent = parent
        super().__init__(self.parent,
                         height=75,
                         relief=tk.RAISED,
                         padding=5,
                         style="odd.group.TFrame",
                         canvas_background=odd_background)
        self.interior.config(style="odd.group.TFrame")
        self.interior.columnconfigure(0, weight=1)
        self.interior.rowconfigure(1, weight=1)
        self.labelwidget = ttk.Label(
            self.interior,
            text="2) Selection Instructions",
            wraplength=20,
            style="odd.heading3.TLabel"
        )
        self.labelwidget.grid(row=0, column=0, sticky=tk.NW)
        self.bind("<Configure>", self.on_resize, "+")
        instr = (
            "  a) Add a selection entity by clicking the 'Add...' button at the bottom of the dialog.\n"
            "  b) Select 'Search' to launch a dialog displaying all options. This dialog can be filtered and sorted.\n"
            "  c) To remove a selection, click on the red 'X'. To remove the entire factor, uncheck the factor on the "
            "dialogue to the left or select the red 'X' on the top right-hand corner of the factor pane."
        )

        self.factor_selection_instr = ttk.Label(
            self.interior,
            style="odd.notes.TLabel",
            text=instr,
            wraplength=self.winfo_width()
        )
        self.factor_selection_instr.grid(row=1, column=0, sticky=tk.NSEW)

    # noinspection PyUnusedLocal
    def on_resize(self, event):
        self._configure_canvas(None)
        self.labelwidget.configure(wraplength=self.interior.winfo_width())
        self.factor_selection_instr.configure(wraplength=self.interior.winfo_width())


class Factor(object):
    root = None
    unit_name = ""
    unit_label = ""
    atomic_label = ""
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    # @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, master, show):
        self.master = master
        self.show = show
        self.entity = None
        self.session = None
        self.unit_name = self.__class__.unit_name
        self.unit_label = self.__class__.unit_label
        self.atomic_label = self.__class__.atomic_label
        self.sel_dict = OrderedDict()
        self.sel_check_btn = None
        self.sel_frame_parent = None
        self.sel_top_level = None

    @debug(lvl=logging.NOTSET, prefix='')
    def atomic_to_unit_query(self, value_list=None):
        atomic_unit = self.entity.factor_dict[self.atomic_label]
        return_query = self.expansion_query()
        if value_list is not None:
            return_query = return_query.filter(
                atomic_unit.expansion_unit_col.in_(value_list))
        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)
        return return_query

    @debug(lvl=logging.NOTSET, prefix='')
    def atomic_to_unit_list(self, value_list=None):
        query = self.atomic_to_unit_query(value_list)
        return_list = [row._asdict()[self.unit_label] for row in query.all()]
        return list(set(return_list))

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        raise NotImplementedError

    @debug(lvl=logging.NOTSET, prefix='')
    def unit_to_atomic_conversion(self, value_list):
        return_list = []

        return_query = self.expansion_query()
        if value_list is not None:
            return_query = return_query.filter(
                self.expansion_unit_col.in_(value_list))
        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        sub_unit = self.entity.factor_dict[self.atomic_label]

        # noinspection PyProtectedMember
        return_list.extend([row._asdict()[sub_unit.unit_label] for row in return_query.all()])
        self.__class__.logger.log(logging.NOTSET, "{}: {} List: {}".format(self.unit_name,
                                                                          sub_unit.unit_label,
                                                                          return_list))
        return sub_unit.unit_to_atomic_conversion(return_list)

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def sel_list(self):
        selection_list = []
        for selection in self.sel_dict.values():
            selection_list.extend(selection.value)
        return selection_list

    @debug(lvl=logging.NOTSET, prefix='')
    def get_new_entry_name(self):
        for name_count in range(100):
            if name_count < 10:
                entry_count_str = "0" + str(name_count)
            elif name_count < 100:
                entry_count_str = str(name_count)
            else:
                raise ValueError
            fullname = "{}_{}".format(self.unit_label.lower(), entry_count_str)
            if self.sel_dict.get(fullname) is None:
                return fullname

    @debug(lvl=logging.NOTSET, prefix='')
    def get_filtered_display_query(self):
        if self.sel_list:
            return self.get_display_query().filter(
                self.unit_col.notin_(self.sel_list)
            ).order_by(self.unit_col.asc())
        else:
            return self.get_display_query().order_by(self.unit_col.asc())

    @debug(lvl=logging.NOTSET, prefix="")
    def grid_check_btn(self, frame, row):
        if self.show:
            self.sel_check_btn = ttk.Checkbutton(frame,
                                                 padding=5,
                                                 text=self.unit_name,
                                                 command=self.check_cmd,
                                                 style="even.dflt.TCheckbutton",
                                                 name="{}_sel_check_btn".format(self.unit_label.lower()))
            self.sel_check_btn.state(['!alternate', '!selected'])
            self.sel_check_btn.grid(row=row, column=0, sticky=tk.EW)

    @debug(lvl=logging.NOTSET, prefix="")
    def add_sel_frame_parent(self, frame):
        self.sel_frame_parent = SelFrameParent(self, frame)

    @debug(lvl=logging.NOTSET, prefix='')
    def grid_frame(self):
        self.sel_check_btn.state(['selected'])
        self.sel_frame_parent.grid_frame()

    @debug(lvl=logging.NOTSET, prefix='')
    def remove_frame(self):
        self.sel_check_btn.state(['!selected'])
        self.sel_frame_parent.master.forget(self.sel_frame_parent)
        for criteria_key in self.sel_dict.copy():
            criteria_obj = self.sel_dict[criteria_key]
            self.sel_frame_parent.remove_entry(entry_obj=criteria_obj)

    @debug(lvl=logging.NOTSET, prefix='')
    def search(self, entry_obj):
        if self.sel_top_level is not None:
            self.sel_top_level.destroy()
            self.sel_top_level = None
            self.search(entry_obj)
        else:
            entry_obj.value = SelTopLevel(self).selection

    # noinspection PyUnusedLocal
    @debug(lvl=logging.NOTSET, prefix='')
    def validate_selection(self,
                           action=None,
                           index=None,
                           value_if_allowed="",
                           prior_value=None,
                           text=None,
                           validation_type=None,
                           trigger_type=None,
                           widget_name=None):
        return True

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        raise NotImplementedError

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        raise NotImplementedError

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        raise NotImplementedError

    @debug(lvl=logging.NOTSET, prefix='')
    def check_cmd(self):
        if 'selected' in self.sel_check_btn.state():
            self.sel_frame_parent.grid_frame()
        elif 'selected' not in self.sel_check_btn.state():
            self.sel_frame_parent.remove_frame()

    @debug(lvl=logging.DEBUG, prefix='')
    def run_test(self, value_list=None):
        if value_list is not None:
            self.sel_check_btn.invoke()
            for value in value_list:
                paned_frame_name = self.sel_frame_parent.add_btn.invoke()
                paned_frame = self.master.nametowidget(paned_frame_name)
                paned_frame.value = [value]

    @debug(lvl=logging.NOTSET, prefix='')
    def sel_conversion(self):
        return self.unit_to_atomic_conversion(self.sel_list)


class FactorContract(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Contract Number"
    unit_label = "Cntr_Num"
    atomic_label = ("Cust_Num_ShipTo_Combo", "Cust_Num", "Cust_Cat")

    @debug(lvl=logging.NOTSET, prefix='')
    def unit_to_atomic_conversion(self, value_list=None):
        return_list = []
        self.__class__.logger.log(logging.NOTSET, "{} Selection List: {}".format(self.unit_name, self.sel_list))

        factor_list = [
            self.entity.factor_dict["Cust_Num_ShipTo_Combo"],
            self.entity.factor_dict["Cust_Num"],
            self.entity.factor_dict["Cust_Cat"]
        ]

        list_list = [
            self.get_cust_shipto(value_list),
            self.get_customer(value_list),
            self.get_cust_cat(value_list)
        ]

        for factor, fact_list in zip(factor_list, list_list):
            if fact_list:
                return_list.extend(factor.unit_to_atomic_conversion(fact_list))

        self.__class__.logger.log(logging.NOTSET, "{} Return List: {}".format(self.unit_name, return_list))
        return return_list

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        return self.unit_col

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.label(self.unit_name),
            ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Desc.label("Description"),
            ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Vend_Num.label("Vendor #"),
            ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Vend_Cntr_Num.label("Vend. Contract #"),
            ARW_PRF_Mapping.cntr_header_01_current.__table__.c.All_Cust_Flag.label("All Customers? (Y/N)"))

    @debug(lvl=logging.NOTSET, prefix='')
    def get_cust_shipto(self, value_list=None):
        return_list = []
        if value_list is not None:
            import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
            # Step 1: Customer/Ship-To Combos
            # noinspection PyPep8,PyComparisonWithNone
            return_query = self.session.query(
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.label(self.unit_label),
                ARW_PRF_Mapping.cntr_shipto_01_current.Cust_Num_ShipTo_Combo.label("Cust_Num_ShipTo_Combo")
            ).outerjoin(
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__,
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num ==
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cntr_Num
            ).filter(and_(
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.All_Cust_Flag == 'N',
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Ship_To_Nums.isnot(None),
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Ship_To_Nums != "",
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cust_Nums.isnot(None),
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cust_Nums != "",
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.in_(value_list)
            ))
            # from cep_price_console.db_management.server_utils import verbose_query
            # verbose_query(return_query)
            # noinspection PyProtectedMember
            return_list.extend([row._asdict()["Cust_Num_ShipTo_Combo"] for row in return_query.all()])
        self.__class__.logger.log(logging.NOTSET, "{} cust_shipto return list: {}".format(self.unit_name, return_list))
        return return_list

    @debug(lvl=logging.NOTSET, prefix='')
    def get_one_customer(self, value_list=None):
        return_list = []
        if value_list is not None:
            import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
            # Step 2: Customers with Null Ship-Tos
            return_query = self.session.query(
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.label(self.unit_label),
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cust_Nums.label("Cust_Num")
            ).outerjoin(
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__,
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cntr_Num ==
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num
            ).filter(and_(
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.All_Cust_Flag == 'N',
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cust_Nums.isnot(None),
                ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Cust_Nums != "",
                or_(
                    ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Ship_To_Nums.is_(None),
                    ARW_PRF_Mapping.cntr_shipto_01_current.__table__.c.Ship_To_Nums == ""
                ),
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.in_(value_list)
            ))
            # from cep_price_console.db_management.server_utils import verbose_query
            # verbose_query(return_query)
            # noinspection PyProtectedMember
            return_list.extend([row._asdict()["Cust_Num"] for row in return_query.all()])
        self.__class__.logger.log(logging.NOTSET, "{} one customer return list: {}".format(self.unit_name, return_list))
        return return_list

    @debug(lvl=logging.NOTSET, prefix='')
    def get_all_customer(self, value_list=None):
        return_list = []
        if value_list is not None:
            import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping

            flag_query = self.session.query(
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.label("Cntr_Num"),
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.All_Cust_Flag.label("All_Cust_Flag")
            ).filter(
                ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.in_(value_list)
            )

            flag_dict = {row._asdict()["Cntr_Num"]: row._asdict()["All_Cust_Flag"] for row in flag_query.all()}

            for cntr_num, cust_flag in flag_dict.items():
                print("Contract: {} Flag: {}".format(cntr_num, cust_flag))
                if cust_flag == 'Y':
                    # Step 3: All Customer Flags
                    return_query = self.session.query(
                        ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num.label(self.unit_label),
                        ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Num.label("Cust_Num")
                    ).filter(
                        ARW_PRF_Mapping.cntr_header_01_current.__table__.c.Cntr_Num == cntr_num
                    )
            # from cep_price_console.db_management.server_utils import verbose_query
            # verbose_query(return_query)
            # noinspection PyProtectedMember
                    return_list.extend([row._asdict()["Cust_Num"] for row in return_query.all()])
        self.__class__.logger.log(logging.NOTSET, "{} all customer return list: {}".format(self.unit_name, return_list))
        return return_list

    @debug(lvl=logging.NOTSET, prefix='')
    def get_customer(self, value_list=None):
        return_list = []
        return_list.extend(self.get_one_customer(value_list))
        return_list.extend(self.get_all_customer(value_list))
        self.__class__.logger.log(logging.NOTSET, "{} customer return list: {}".format(self.unit_name, return_list))
        return return_list

    @debug(lvl=logging.NOTSET, prefix='')
    def get_cust_cat(self, value_list=None):
        return_list = []
        if value_list is not None:
            import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
            # Step 2: Contract Categories
            return_query = self.session.query(
                ARW_PRF_Mapping.cntr_category_01_current.__table__.c.Cntr_Num.label(self.unit_label),
                ARW_PRF_Mapping.cntr_category_01_current.__table__.c.Cust_Cat.label("Cust_Cat")
            ).filter(
                ARW_PRF_Mapping.cntr_category_01_current.__table__.c.Cntr_Num.in_(value_list)
            )

            # from cep_price_console.db_management.server_utils import verbose_query
            # verbose_query(return_query)
            # noinspection PyProtectedMember
            return_list.extend([row._asdict()["Cust_Cat"] for row in return_query.all()])
        self.__class__.logger.log(logging.NOTSET, "{} cust_cat return list: {}".format(self.unit_name, return_list))
        return return_list


class FactorCustCategory(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Customer Category"
    unit_label = "Cust_Cat"
    atomic_label = "Cust_Num"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Cat

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        return self.unit_col

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Cat.label(self.unit_name)
        ).distinct()

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Cat.label(self.unit_label),
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Num.label("Cust_Num")
        )
        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)
        return return_query


class FactorCustomer(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Customer Number"
    unit_label = "Cust_Num"
    atomic_label = "Cust_Num_ShipTo_Combo"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.cust_master_01_current.Cust_Num

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        return self.unit_col

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Num.label(self.unit_name),
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Name.label("Customer Name")
        )

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Num.label(self.unit_label),
            ARW_PRF_Mapping.shipto_main_01_current.Cust_Num_ShipTo_Combo.label("Cust_Num_ShipTo_Combo")
        ).join(
            ARW_PRF_Mapping.shipto_main_01_current.__table__,
            ARW_PRF_Mapping.shipto_main_01_current.__table__.c.Cust_Num ==
            ARW_PRF_Mapping.cust_master_01_current.__table__.c.Cust_Num
        )

        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        return return_query


class FactorCustShipTo(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Customer ShipTo Number"
    unit_label = "Cust_Num_ShipTo_Combo"
    # atomic_label = "Cust_Num_ShipTo_Combo"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.shipto_main_01_current.Cust_Num_ShipTo_Combo

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        return self.unit_col

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.shipto_main_01_current.Cust_Num_ShipTo_Combo.label(self.unit_name),
            ARW_PRF_Mapping.shipto_main_01_current.__table__.c.Cust_Num.label("Customer #"),
            ARW_PRF_Mapping.shipto_main_01_current.__table__.c.ShipTo_Name.label("Ship To Name")
        )

    @debug(lvl=logging.NOTSET, prefix='')
    def unit_to_atomic_conversion(self, value_list):
        return value_list


class FactorProdLine(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Product Line"
    unit_label = "Prod_Line"
    atomic_label = "Prod_Num"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        # return ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Code
        return ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Code

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Line

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Code.label(self.unit_name),
            ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Desc.label("Description"),
            ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Major_Group.label("Major Group"))

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Line.label(self.unit_label),
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Num.label("Prod_Num")
        )

        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        return return_query


class FactorPriceGroup(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Price Group"
    unit_label = "Price_Group_Code"
    atomic_label = "Prod_Num"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.prod_main_01_current.__table__.c.Price_Group_Code

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        return self.unit_col

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Price_Group_Code.label(self.unit_name)
        ).distinct()

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Price_Group_Code.label(self.unit_label),
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Num.label("Prod_Num")
        )

        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        return return_query


class FactorPrimaryVendor(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Primary Vendor Number"
    unit_label = "Primary_Vend_Num"
    atomic_label = "Prod_Num"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        # return ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Num
        return ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Num

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.prod_main_01_current.__table__.c.Primary_Vend

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Num.label(self.unit_name),
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Name.label("Vendor Name"),
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Status.label("Vendor Status")
        ).join(
            ARW_PRF_Mapping.prod_main_01_current.__table__,
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Primary_Vend ==
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Num
        ).distinct()

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Primary_Vend.label(self.unit_label),
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Num.label("Prod_Num")
        )

        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        return return_query


class FactorSecondaryVendor(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Vendor Number"
    unit_label = "Vend_Num"
    atomic_label = "Prod_Num"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Num

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.prod_vend_01_current.__table__.c.Vend_Num

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Num.label(self.unit_name),
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Vend_Name.label("Vendor Name"),
            ARW_PRF_Mapping.vend_main_01_current.__table__.c.Status.label("Vendor Status"))

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.prod_vend_01_current.__table__.c.Vend_Num.label(self.unit_label),
            ARW_PRF_Mapping.prod_vend_01_current.__table__.c.Prod_Num.label("Prod_Num")
        )

        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        return return_query


class FactorMajorGroup(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Major Group"
    unit_label = "Major_Group"
    atomic_label = "Prod_Line"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.major_group_main_01_current.__table__.c.Code
        # return ARW_PRF_Mapping.major_group_main_01_current.__table__.c.Code

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Major_Group

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.major_group_main_01_current.__table__.c.Code.label(self.unit_name),
            ARW_PRF_Mapping.major_group_main_01_current.__table__.c.Desc.label("Description"))

    @debug(lvl=logging.NOTSET, prefix='')
    def expansion_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return_query = self.session.query(
            ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Major_Group.label(self.unit_label),
            ARW_PRF_Mapping.prod_line_main_01_current.__table__.c.Code.label("Prod_Line")
        )
        # from cep_price_console.db_management.server_utils import verbose_query
        # verbose_query(return_query)

        return return_query


class FactorProduct(Factor):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)
    unit_name = "Product Number"
    unit_label = "Prod_Num"
    atomic_label = "Prod_Num"

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def unit_col(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Num

    @property
    @debug(lvl=logging.NOTSET, prefix="")
    def expansion_unit_col(self):
        return self.unit_col

    @debug(lvl=logging.NOTSET, prefix='')
    def get_display_query(self):
        import cep_price_console.db_management.ARW_PRF_Mapping as ARW_PRF_Mapping
        return self.session.query(
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Prod_Num.label(self.unit_name),
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Desc_Full.label("Description"),
            ARW_PRF_Mapping.prod_main_01_current.__table__.c.Status.label("Status"))

    @debug(lvl=logging.NOTSET, prefix='')
    def unit_to_atomic_conversion(self, value_list):
        return value_list


class SelFrameParent(ttk.Frame):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    # noinspection PyMethodParameters
    @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, factor, parent):
        self.factor = factor
        self.parent = parent
        super().__init__(self.parent,
                         style="odd.group.TFrame",
                         relief=tk.RAISED,
                         padding=5)
        self.rowconfigure(2, weight=1)
        self.columnconfigure(0, weight=1)

        self.header = ttk.Label(
            self,
            text="{} Selection".format(self.factor.unit_name), style="odd.heading2.TLabel"
        )
        self.header.grid(row=0, column=0)

        self.close_btn = BadButton(
            self,
            text="X",
            width=3,
            command=self.remove_frame
        )
        self.close_btn.grid(row=0, column=1, sticky=tk.NE)

        self.paned_window_frame = VerticalScrolledFrame(
            self,
            style="even.group.TFrame",
            relief=tk.SUNKEN,
            padding=5,
            canvas_background=even_background
        )
        self.paned_window_frame.grid(row=2, column=0, columnspan=2, sticky=tk.NSEW)
        self.paned_window_frame.interior.rowconfigure(0, weight=1)
        self.paned_window_frame.interior.columnconfigure(0, weight=1)

        self.paned_window = tk.PanedWindow(
            self.paned_window_frame.interior,
            orient=tk.VERTICAL,
            opaqueresize=True,
            background=even_background,
            sashrelief=tk.FLAT,
            sashwidth=4
        )
        self.paned_window.grid(row=0, column=0, sticky=tk.NSEW)

        self.add_btn = ttk.Button(self, text="Add", command=self.add_entry)
        self.add_btn.grid(row=3, column=0, sticky=tk.NSEW, columnspan=2)

        self.bind("<Configure>", self.on_resize, "+")

    # noinspection PyUnusedLocal
    def on_resize(self, event):
        self.header.configure(
            wraplength=self.winfo_width() - self.add_btn.winfo_reqwidth() + 30)

    @debug(lvl=logging.NOTSET, prefix='')
    def grid_frame(self,
                   minsize=40,
                   sticky=tk.NSEW,
                   stretch="always"):
        self.update_idletasks()
        self.master.add(self,
                        width=self.winfo_reqwidth(),
                        minsize=minsize,
                        sticky=sticky,
                        stretch=stretch)

    @debug(lvl=logging.NOTSET, prefix='')
    def remove_frame(self):
        self.factor.remove_frame()

    @debug(lvl=logging.NOTSET, prefix='')
    def add_entry(self):
        # noinspection PyUnusedLocal
        entry_obj = SelFrameChild(self.factor, self.paned_window)
        self.factor.sel_dict[entry_obj.name] = entry_obj
        self.paned_window.add(entry_obj,
                              padx=3,
                              pady=3,
                              stretch='never',
                              sticky=tk.NSEW,
                              minsize=40,
                              height=40)
        # noinspection PyProtectedMember
        self.paned_window_frame._configure_canvas(None)
        return entry_obj

    @debug(lvl=logging.NOTSET, prefix='')
    def remove_entry(self, entry_obj):
        self.factor.sel_dict.pop(entry_obj.name)
        self.paned_window.forget(entry_obj)
        # noinspection PyProtectedMember
        self.paned_window_frame._configure_canvas(None)


class SelFrameChild(ttk.Frame):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    # noinspection PyMethodParameters
    @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, factor, master):
        self.factor = factor
        self.master = master
        self.name = self.factor.get_new_entry_name()
        self.__value = []
        super().__init__(self.master,
                         name=self.name,
                         borderwidth=5,
                         relief=tk.RAISED,
                         style="odd.group.TFrame",
                         takefocus=True)
        self.rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)

        self.entry_var = tk.StringVar()
        self.entry_var.set("")

        entry_validation = (self.register(self.factor.validate_selection),
                            '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')

        self.entry = tk.Entry(
            self,
            textvariable=self.entry_var,
            relief=tk.SUNKEN,
            validate='focusout',
            validatecommand=entry_validation,
            state=tk.DISABLED,
            disabledbackground="gray91",
            font=dflt
        )
        self.entry.grid(row=0, column=0, sticky=tk.NSEW)

        self.search_btn = ttk.Button(
            self,
            text="Search",
            command=lambda: self.factor.search(entry_obj=self),
            width=7
        )
        self.search_btn.grid(row=0, column=1, sticky=tk.NS, padx=2)

        self.close_btn = BadButton(
            self,
            text="X",
            width=1,
            command=lambda: self.factor.sel_frame_parent.remove_entry(entry_obj=self)
        )
        self.close_btn.grid(row=0, column=2, sticky=tk.NE + tk.S)

        self.sash_index = None
        self.sash_object = None

    @property
    @debug(lvl=logging.NOTSET)
    def value(self):
        return self.__value

    @value.setter
    @debug(lvl=logging.NOTSET, prefix="")
    def value(self, val):
        self.entry_var.set(", ".join(val))
        self.__value = val


class SelTopLevel(tk.Toplevel):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    # noinspection PyMethodParameters
    @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, factor, *args, **kwargs):
        from cep_price_console.utils import config
        from cep_price_console.utils.mypandastable import MyTable

        self.factor = factor
        super().__init__(self.factor.sel_frame_parent, *args, **kwargs)

        self.title("{} Selection Dialog".format(self.factor.unit_name))
        self.iconbitmap(config.FAVICON)

        self.factor.sel_top_level = self
        self.__selection = ""

        self.rowconfigure(2, weight=1)
        self.columnconfigure(0, weight=1)

        self.header = ttk.Label(
            self,
            style="odd.heading2.TLabel",
            text="{} Selection".format(self.factor.unit_name),
            wraplength=self.winfo_width()
        )
        self.header.grid(row=0, column=0, sticky=tk.NSEW, columnspan=2)
        instr = ("Select an entry below by:\n"
                 "    1) Double-clicking on any cell of a row. \n"
                 "    2) Right-clicking on any cell of a row and choosing 'Select'\n"
                 "    3) Highlighting the row and pressing the 'Select' button below.\n"
                 "Right-click on a column to sort by a column.Filter records by right-clicking on any "
                 "cell and selecting 'Filter Records' Note: Due to a software bug, you cannot sort and "
                 "filter data at the same time.")
        self.instr = ttk.Label(
            self,
            style="odd.dflt.TLabel",
            text=instr,
            wraplength=self.winfo_width(),
            padding=5
        )
        self.instr.grid(row=1, column=0, sticky=tk.NSEW, columnspan=2)

        self.tkintertable_frame = ttk.Frame(self)
        self.tkintertable_frame.rowconfigure(1, weight=1)
        self.tkintertable_frame.columnconfigure(1, weight=1)
        self.tkintertable_frame.grid(row=2, column=0, sticky=tk.NSEW, columnspan=2)

        self.select_btn = ttk.Button(
            self,
            command=self.select,
            default=tk.ACTIVE,
            text="Select")
        self.select_btn.grid(row=3, column=0, sticky=tk.NE + tk.S)

        self.close_btn = ttk.Button(
            self,
            command=self.close,
            text="Cancel"
        )
        self.close_btn.grid(row=3, column=1, sticky=tk.NE + tk.S)

        self.bind("<Return>", self.select, "+")
        self.bind("<Escape>", self.close, "+")
        self.bind("<Configure>", self.on_resize, "+")

        self.tkintertable_model = TableModel(
            dataframe=pd.read_sql(
                self.factor.get_filtered_display_query().statement,
                self.factor.session.bind,
                # index_col=self.factor.index_col  # TODO: This could come from the factor. Does it need to be a string?
                # coerce_float=True, # TODO: This could be useful.
                # parse_dates=None, # TODO: Iterate through columns to determine which column to display as dates?
                # chunksize=None # TODO: Could be useful.
            )
        )

        self.tkintertable_table = MyTable(self.tkintertable_frame,
                                          model=self.tkintertable_model,
                                          showtoolbar=False,
                                          showstatusbar=True,
                                          allow_edits=False)

        self.tkintertable_table.bind("<Double-Button-1>", self.select, "+")
        self.tkintertable_table.show()

        self.initial_focus = self

        self.protocol("WM_DELETE_WINDOW", self.close)

        self.initial_focus.focus_set()

        self.wait_window(self)

    # noinspection PyUnusedLocal, PyMethodParameters
    @debug(lvl=logging.NOTSET, prefix='')
    def close(self, *args):
        self.factor.sel_frame_parent.focus_set()
        self.destroy()

    # noinspection PyUnusedLocal, PyMethodParameters
    @debug(lvl=logging.NOTSET, prefix='')
    def select(self, *args):
        selection_list = []
        for row_number in self.tkintertable_table.multiplerowlist:
            selection_list.append(self.tkintertable_model.df.loc[row_number, self.factor.unit_name])
        self.selection = selection_list

    # noinspection PyMethodParameters,PyPropertyDefinition
    @property
    @debug(lvl=logging.NOTSET)
    def selection(self):
        return self.__selection

    # noinspection PyMethodParameters,PyPropertyDefinition
    @selection.setter
    @debug(lvl=logging.NOTSET, prefix="")
    def selection(self, value):
        self.__selection = value
        self.withdraw()
        self.update_idletasks()
        self.close()

    # noinspection PyUnusedLocal, PyMethodParameters
    def on_resize(self, event):
        self.instr.configure(wraplength=self.winfo_width())
        self.header.configure(wraplength=self.winfo_width())


class Entity(object):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    def __init__(self, session):
        self.session = session
        self.factor_dict = {}
        self.atomic_str = None

    @debug(lvl=logging.NOTSET, prefix="")
    def add_factor(self, fact_instance):
        fact_instance.entity = self
        fact_instance.session = self.session
        self.factor_dict[fact_instance.unit_label] = fact_instance

    @debug(lvl=logging.NOTSET, prefix='')
    def get_unified_sel(self):
        """
        Each selection needs to be it's own set.
        Within each entity, the selections should be additive.
        Between entities, the selections should be subtractive.
        """
        unified_set = None
        for factor in self.factor_dict.values():
            fact_list = factor.sel_conversion()
            if fact_list:
                if unified_set is None:
                    unified_set = set(fact_list)
                else:
                    unified_set = unified_set.intersection(set(fact_list))
                self.__class__.logger.log(logging.NOTSET, "Fact_set: {}".format(list(unified_set)))
        if unified_set is None:
            # noinspection PyProtectedMember
            unified_set = set([row._asdict()[self.factor_dict[self.atomic_str].unit_name] for row in
                               self.factor_dict[self.atomic_str].get_display_query().all()])
        return list(unified_set)


class CustEntity(Entity):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    @debug(lvl=logging.NOTSET, prefix='')
    def __init__(self, session):
        super().__init__(session)
        self.atomic_str = "Cust_Num_ShipTo_Combo"


class ProdEntity(Entity):
    logger = CustomAdapter(logging.getLogger(str(__name__)), None)

    def __init__(self, session):
        super().__init__(session)
        self.atomic_str = "Prod_Num"
